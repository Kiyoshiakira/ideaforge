openapi: 3.0.3
info:
  title: IdeaForge API
  description: |
    The IdeaForge API provides comprehensive endpoints for managing creative projects, 
    user collaboration, and creative content. This API enables artists, writers, musicians,
    and other creative professionals to collaborate in real-time.
    
    ## Authentication
    Most endpoints require JWT-based authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <token>
    ```
  version: 1.0.0
  contact:
    name: IdeaForge Support
    email: support@ideaforge.example.com
  license:
    name: AGPL-3.0
    url: https://github.com/Kiyoshiakira/ideaforge/blob/main/LICENSE

servers:
  - url: https://api.ideaforge.example.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Local development server

tags:
  - name: auth
    description: Authentication and user session management
  - name: users
    description: User profile and account operations
  - name: projects
    description: Creative project management
  - name: collaborations
    description: Real-time collaboration features
  - name: content
    description: Creative content management (scripts, music, art, etc.)

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Create a new user account with email and password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  format: email
                  example: artist@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: securePassword123!
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: creative_artist
                fullName:
                  type: string
                  example: Jane Doe
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticate user and receive JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      tags:
        - users
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve public profile information for a specific user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects:
    get:
      tags:
        - projects
      summary: List projects
      description: Retrieve a list of projects accessible to the user
      operationId: listProjects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: status
          in: query
          schema:
            type: string
            enum: [active, archived, draft]
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - projects
      summary: Create a new project
      description: Create a new creative project
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}:
    get:
      tags:
        - projects
      summary: Get project details
      description: Retrieve detailed information about a specific project
      operationId: getProjectById
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: usr_1234567890
        username:
          type: string
          example: creative_artist
        email:
          type: string
          format: email
          example: artist@example.com
        fullName:
          type: string
          example: Jane Doe
        avatar:
          type: string
          format: uri
          example: https://api.ideaforge.example.com/avatars/user123.jpg
        bio:
          type: string
          example: Filmmaker and writer passionate about collaborative storytelling
        skills:
          type: array
          items:
            type: string
          example: [filmmaking, writing, music]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
          example: proj_abc123
        title:
          type: string
          example: Sci-Fi Feature Film
        description:
          type: string
          example: A collaborative sci-fi film project set in 2150
        type:
          type: string
          enum: [film, music, animation, game, writing, mixed]
          example: film
        status:
          type: string
          enum: [draft, active, archived]
          example: active
        owner:
          $ref: '#/components/schemas/User'
        collaborators:
          type: array
          items:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              role:
                type: string
                enum: [owner, editor, viewer]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectCreate:
      type: object
      required:
        - title
        - type
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: New Creative Project
        description:
          type: string
          maxLength: 2000
          example: A description of the creative project
        type:
          type: string
          enum: [film, music, animation, game, writing, mixed]
        tags:
          type: array
          items:
            type: string
          example: [sci-fi, collaboration, experimental]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 86400

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8

    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid request
        message:
          type: string
          example: The provided email address is already registered
        code:
          type: string
          example: USER_ALREADY_EXISTS
        statusCode:
          type: integer
          example: 409
